import { FC, ReactNode, MouseEvent, KeyboardEvent } from 'react';
interface IReactHookFormTextProps {
    type?: string;
    variant?: string | undefined;
    label: string;
    name: string;
    size?: any;
    success?: boolean;
    color?: any;
    icon?: ReactNode;
    placeholder?: string;
    disabled?: boolean;
    actionBoton?: boolean;
    value?: any;
    isBoton?: boolean;
    textoBoton?: string;
    onClick?: (e: MouseEvent<HTMLButtonElement>) => void;
    onChange?: any;
    onBlur?: (e: MouseEvent<HTMLButtonElement>) => void;
    onKeyDown?: (e: KeyboardEvent<HTMLInputElement>) => void;
    onChangeDate?: any;
    onChangeNumeric?: any;
    onIsAllowed?: any;
    onValidNumeric?: any;
    methods?: any;
    lblEtiqueta?: string;
    metodoRestriccion?: any;
    opt?: any;
    hidden?: any;
    maxLength?: number;
    minLength?: number;
    mask?: any;
    alwaysShowMask?: boolean;
    readOnly?: boolean;
    optInput?: string;
    thousandSeparator?: boolean;
    prefix?: string;
    allowLeadingZeros?: boolean;
    decimalScale?: number;
    dateFormat?: string;
    showMonthYearPicker?: boolean;
    allowNegative?: boolean;
    minDate?: any;
    maxDate?: any;
    defaultFecha?: boolean;
    defaultValue?: any;
    defaultChecked?: boolean;
    parteEntera?: number;
    ischecked?: boolean;
    minFractionDigits?: number;
    maxFractionDigits?: number;
    useGrouping?: boolean;
    locales?: string;
    mode?: any;
    currency?: any;
    suffix?: string;
    showButtons?: boolean;
    buttonLayout?: any;
    rows?: number;
    cols?: number;
    autoResize?: boolean;
    keyfilter?: any;
    showTime?: boolean;
    timeOnly?: boolean;
    selectionMode?: any;
    feedback?: boolean;
    toggleMask?: boolean;
    header?: string | null | JSX.Element | JSX.Element[];
    footer?: string | null | JSX.Element | JSX.Element[];
}
export declare const TextInput: ({ label, name, size, placeholder, disabled, minFractionDigits, maxFractionDigits, onClick, methods, onChange, onBlur, onChangeDate, useGrouping, feedback, maxLength, minLength, readOnly, optInput, buttonLayout, toggleMask, defaultValue, prefix, dateFormat, mask, ischecked, header, footer, minDate, maxDate, locales, mode, currency, suffix, showButtons, rows, cols, autoResize, keyfilter, showTime, timeOnly, selectionMode, value }: IReactHookFormTextProps) => JSX.Element;
interface IReactHookFormSelectProps {
    label: string;
    name: string;
    isDisabled?: boolean;
    onChangeSelect?: (e: MouseEvent<HTMLButtonElement>) => void;
    methods?: any;
    placeholder?: string;
    data: any;
    defaultValue?: any;
    isObject?: boolean;
    loading?: boolean;
}
export declare const SelectInput: FC<IReactHookFormSelectProps>;
interface IReactHookEditorProps {
    readOnly: boolean;
    style: object;
    label: string;
    name: string;
    methods: any;
}
export declare const EditorInput: ({ readOnly, style, methods, label, name }: IReactHookEditorProps) => JSX.Element;
export declare const CheckBoxInput: ({ disabled, methods, label, name, value, onChangeCheck }: {
    disabled: boolean;
    methods: any;
    label: string;
    name: string;
    value: any;
    onChangeCheck?: ((e: MouseEvent<HTMLButtonElement>) => void) | undefined;
}) => JSX.Element;
export declare const InputGroup: ({ methods, name, label, icon, placeholder, readOnly, onClick }: {
    methods: any;
    name: string;
    label: string;
    icon: string;
    placeholder: string;
    readOnly: boolean;
    onClick: any;
}) => JSX.Element;
export declare const MultiSelectInput: FC<IReactHookFormSelectProps>;
export declare const RadioButtonInput: ({ disabled, methods, label, name, value, inputId, setValue }: {
    disabled: boolean;
    methods: any;
    label: string;
    name: string;
    value: any;
    inputId: string;
    setValue?: any;
}) => JSX.Element;
export {};
